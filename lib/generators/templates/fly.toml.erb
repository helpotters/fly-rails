app = "<%= @app %>"
<% if @nomad -%>
kill_signal = "SIGINT"
kill_timeout = 5
<% unless @avahi or @nats -%>
processes = []
<% end -%>

[build]
  [build.args]
    BUILD_COMMAND = "bin/rails fly:build"
<% if @litefs -%>
    SERVER_COMMAND = "litefs"
<% else -%>
    SERVER_COMMAND = "bin/rails fly:server"

[deploy]
  release_command = "bin/rails fly:release"
<% end -%>

[env]
  PORT = "8080"
<% if @sqlite3 -%>
<% if @litefs -%>
  DATABASE_URL = "sqlite3:///data/production.sqlite3"
<% else -%>
  DATABASE_URL = "sqlite3:///mnt/volume/production.sqlite3"
<% end -%>
<% if @avahi or @nats -%>

[processes]
  app = "bin/rails fly:server[<%= @procs.keys.map {|key| "#{key}=1"}.join(';') %>]"
<% end -%>

[mounts]
  source = <%= "#{app.gsub('-', '_')}_volume".inspect %>
  destination = "/mnt/volume"
<% end -%>

[experimental]
  allowed_public_ports = []
  auto_rollback = true
<% if @litefs -%>
  enable_consul = true
<% end  -%>

[[services]]
  http_checks = []
  internal_port = 8080
  processes = ["app"]
  protocol = "tcp"
  script_checks = []
  [services.concurrency]
<% if @cable -%>
    hard_limit = 2500
    soft_limit = 2000
<% else -%>
    hard_limit = 25
    soft_limit = 20
<% end -%>
    type = "connections"

  [[services.ports]]
    force_https = true
    handlers = ["http"]
    port = 80

  [[services.ports]]
    handlers = ["tls", "http"]
    port = 443

  [[services.tcp_checks]]
    grace_period = "1s"
    interval = "15s"
    restart_limit = 0
    timeout = "2s"

[[statics]]
  guest_path = "/app/public"
  url_prefix = "/"
<% end -%>